// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dyson/schedualed_run.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SchedualedRun struct {
	Index    string          `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Creator  string          `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Height   uint64          `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Gas      uint64          `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	Msg      *MsgRun         `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	Resp     *MsgRunResponse `protobuf:"bytes,6,opt,name=resp,proto3" json:"resp,omitempty"`
	Error    string          `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	Gasprice *types.Coin     `protobuf:"bytes,8,opt,name=gasprice,proto3" json:"gasprice,omitempty"`
	Fee      *types.Coin     `protobuf:"bytes,9,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *SchedualedRun) Reset()         { *m = SchedualedRun{} }
func (m *SchedualedRun) String() string { return proto.CompactTextString(m) }
func (*SchedualedRun) ProtoMessage()    {}
func (*SchedualedRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa726cf8f16bdc3d, []int{0}
}
func (m *SchedualedRun) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedualedRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedualedRun.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedualedRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedualedRun.Merge(m, src)
}
func (m *SchedualedRun) XXX_Size() int {
	return m.Size()
}
func (m *SchedualedRun) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedualedRun.DiscardUnknown(m)
}

var xxx_messageInfo_SchedualedRun proto.InternalMessageInfo

func (m *SchedualedRun) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *SchedualedRun) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SchedualedRun) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SchedualedRun) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *SchedualedRun) GetMsg() *MsgRun {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *SchedualedRun) GetResp() *MsgRunResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *SchedualedRun) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *SchedualedRun) GetGasprice() *types.Coin {
	if m != nil {
		return m.Gasprice
	}
	return nil
}

func (m *SchedualedRun) GetFee() *types.Coin {
	if m != nil {
		return m.Fee
	}
	return nil
}

func init() {
	proto.RegisterType((*SchedualedRun)(nil), "dyson.SchedualedRun")
}

func init() { proto.RegisterFile("dyson/schedualed_run.proto", fileDescriptor_aa726cf8f16bdc3d) }

var fileDescriptor_aa726cf8f16bdc3d = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0xbd, 0x4e, 0xf3, 0x40,
	0x10, 0x8c, 0xe3, 0xfc, 0xde, 0xa7, 0x48, 0x9f, 0x4e, 0xf9, 0x3e, 0x1d, 0x2e, 0x4c, 0x94, 0x2a,
	0x08, 0xe9, 0xac, 0x80, 0xe8, 0xa8, 0xa0, 0xa6, 0x31, 0x1d, 0x0d, 0xf2, 0xcf, 0x72, 0xb6, 0x84,
	0x6f, 0xad, 0x5b, 0x1b, 0x25, 0x6f, 0xc1, 0x9b, 0xf0, 0x1a, 0x94, 0x29, 0x29, 0x51, 0xf2, 0x22,
	0xc8, 0x67, 0x13, 0x89, 0x8a, 0xea, 0x76, 0x76, 0x66, 0xe7, 0x46, 0xc3, 0xbc, 0x74, 0x4b, 0xa8,
	0x03, 0x4a, 0x32, 0x48, 0xeb, 0xe8, 0x19, 0xd2, 0x47, 0x53, 0x6b, 0x59, 0x1a, 0xac, 0x90, 0x0f,
	0x2d, 0xe7, 0xcd, 0x15, 0x2a, 0xb4, 0x9b, 0xa0, 0x99, 0x5a, 0xd2, 0xf3, 0x13, 0xa4, 0x02, 0x29,
	0x88, 0x23, 0x82, 0xe0, 0x65, 0x1d, 0x43, 0x15, 0xad, 0x83, 0x04, 0xf3, 0xee, 0xd8, 0xe3, 0xad,
	0x71, 0x41, 0xea, 0x68, 0xb8, 0x7c, 0xeb, 0xb3, 0xd9, 0xfd, 0xf1, 0xa7, 0xb0, 0xd6, 0x7c, 0xce,
	0x86, 0xb9, 0x4e, 0x61, 0x23, 0x9c, 0x85, 0xb3, 0x9a, 0x86, 0x2d, 0xe0, 0x82, 0x8d, 0x13, 0x03,
	0x51, 0x85, 0x46, 0xf4, 0xed, 0xfe, 0x1b, 0xf2, 0xff, 0x6c, 0x94, 0x41, 0xae, 0xb2, 0x4a, 0xb8,
	0x0b, 0x67, 0x35, 0x08, 0x3b, 0xc4, 0xff, 0x32, 0x57, 0x45, 0x24, 0x06, 0x76, 0xd9, 0x8c, 0xfc,
	0x94, 0xb9, 0x05, 0x29, 0x31, 0x5c, 0x38, 0xab, 0x3f, 0x17, 0x33, 0x69, 0xd3, 0xc8, 0x3b, 0x52,
	0x61, 0xad, 0xc3, 0x86, 0xe1, 0x67, 0x6c, 0x60, 0x80, 0x4a, 0x31, 0xb2, 0x8a, 0x7f, 0x3f, 0x15,
	0x40, 0x25, 0x6a, 0x82, 0xd0, 0x4a, 0x9a, 0x94, 0x60, 0x0c, 0x1a, 0x31, 0x6e, 0x53, 0x5a, 0xc0,
	0xaf, 0xd8, 0x44, 0x45, 0x54, 0x9a, 0x3c, 0x01, 0x31, 0xb1, 0x26, 0x27, 0xb2, 0x2d, 0x45, 0x36,
	0xa5, 0xc8, 0xae, 0x14, 0x79, 0x8b, 0xb9, 0x0e, 0x8f, 0x52, 0x7e, 0xce, 0xdc, 0x27, 0x00, 0x31,
	0xfd, 0xed, 0xa2, 0x51, 0xdd, 0x5c, 0xbf, 0xef, 0x7d, 0x67, 0xb7, 0xf7, 0x9d, 0xcf, 0xbd, 0xef,
	0xbc, 0x1e, 0xfc, 0xde, 0xee, 0xe0, 0xf7, 0x3e, 0x0e, 0x7e, 0xef, 0x61, 0xa9, 0xf2, 0x2a, 0xab,
	0x63, 0x99, 0x60, 0x11, 0xa0, 0x51, 0x41, 0x5b, 0xf7, 0xa6, 0x7b, 0xab, 0x6d, 0x09, 0x14, 0x8f,
	0x6c, 0xed, 0x97, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x49, 0x22, 0xce, 0x46, 0xe5, 0x01, 0x00,
	0x00,
}

func (m *SchedualedRun) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedualedRun) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedualedRun) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedualedRun(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Gasprice != nil {
		{
			size, err := m.Gasprice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedualedRun(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintSchedualedRun(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Resp != nil {
		{
			size, err := m.Resp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedualedRun(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedualedRun(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Gas != 0 {
		i = encodeVarintSchedualedRun(dAtA, i, uint64(m.Gas))
		i--
		dAtA[i] = 0x20
	}
	if m.Height != 0 {
		i = encodeVarintSchedualedRun(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSchedualedRun(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintSchedualedRun(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchedualedRun(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchedualedRun(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SchedualedRun) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovSchedualedRun(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSchedualedRun(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovSchedualedRun(uint64(m.Height))
	}
	if m.Gas != 0 {
		n += 1 + sovSchedualedRun(uint64(m.Gas))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovSchedualedRun(uint64(l))
	}
	if m.Resp != nil {
		l = m.Resp.Size()
		n += 1 + l + sovSchedualedRun(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovSchedualedRun(uint64(l))
	}
	if m.Gasprice != nil {
		l = m.Gasprice.Size()
		n += 1 + l + sovSchedualedRun(uint64(l))
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovSchedualedRun(uint64(l))
	}
	return n
}

func sovSchedualedRun(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchedualedRun(x uint64) (n int) {
	return sovSchedualedRun(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SchedualedRun) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedualedRun
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedualedRun: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedualedRun: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedualedRun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedualedRun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedualedRun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			m.Gas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedualedRun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedualedRun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgRun{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedualedRun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resp == nil {
				m.Resp = &MsgRunResponse{}
			}
			if err := m.Resp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedualedRun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gasprice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedualedRun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gasprice == nil {
				m.Gasprice = &types.Coin{}
			}
			if err := m.Gasprice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedualedRun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &types.Coin{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchedualedRun(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchedualedRun
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchedualedRun(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchedualedRun
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchedualedRun
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchedualedRun
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchedualedRun
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchedualedRun
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchedualedRun
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchedualedRun        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchedualedRun          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchedualedRun = fmt.Errorf("proto: unexpected end of group")
)
