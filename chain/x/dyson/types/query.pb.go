// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dyson/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetSchedualedRunRequest struct {
	// inxex is the script address
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSchedualedRunRequest) Reset()         { *m = QueryGetSchedualedRunRequest{} }
func (m *QueryGetSchedualedRunRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSchedualedRunRequest) ProtoMessage()    {}
func (*QueryGetSchedualedRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{0}
}
func (m *QueryGetSchedualedRunRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSchedualedRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSchedualedRunRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSchedualedRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSchedualedRunRequest.Merge(m, src)
}
func (m *QueryGetSchedualedRunRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSchedualedRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSchedualedRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSchedualedRunRequest proto.InternalMessageInfo

func (m *QueryGetSchedualedRunRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSchedualedRunResponse struct {
	SchedualedRun SchedualedRun `protobuf:"bytes,1,opt,name=schedualed_run,json=schedualedRun,proto3" json:"schedualed_run"`
}

func (m *QueryGetSchedualedRunResponse) Reset()         { *m = QueryGetSchedualedRunResponse{} }
func (m *QueryGetSchedualedRunResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSchedualedRunResponse) ProtoMessage()    {}
func (*QueryGetSchedualedRunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{1}
}
func (m *QueryGetSchedualedRunResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSchedualedRunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSchedualedRunResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSchedualedRunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSchedualedRunResponse.Merge(m, src)
}
func (m *QueryGetSchedualedRunResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSchedualedRunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSchedualedRunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSchedualedRunResponse proto.InternalMessageInfo

func (m *QueryGetSchedualedRunResponse) GetSchedualedRun() SchedualedRun {
	if m != nil {
		return m.SchedualedRun
	}
	return SchedualedRun{}
}

type QueryAllSchedualedRunRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSchedualedRunRequest) Reset()         { *m = QueryAllSchedualedRunRequest{} }
func (m *QueryAllSchedualedRunRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSchedualedRunRequest) ProtoMessage()    {}
func (*QueryAllSchedualedRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{2}
}
func (m *QueryAllSchedualedRunRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSchedualedRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSchedualedRunRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSchedualedRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSchedualedRunRequest.Merge(m, src)
}
func (m *QueryAllSchedualedRunRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSchedualedRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSchedualedRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSchedualedRunRequest proto.InternalMessageInfo

func (m *QueryAllSchedualedRunRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSchedualedRunResponse struct {
	SchedualedRun []SchedualedRun     `protobuf:"bytes,1,rep,name=schedualed_run,json=schedualedRun,proto3" json:"schedualed_run"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSchedualedRunResponse) Reset()         { *m = QueryAllSchedualedRunResponse{} }
func (m *QueryAllSchedualedRunResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSchedualedRunResponse) ProtoMessage()    {}
func (*QueryAllSchedualedRunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{3}
}
func (m *QueryAllSchedualedRunResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSchedualedRunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSchedualedRunResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSchedualedRunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSchedualedRunResponse.Merge(m, src)
}
func (m *QueryAllSchedualedRunResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSchedualedRunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSchedualedRunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSchedualedRunResponse proto.InternalMessageInfo

func (m *QueryAllSchedualedRunResponse) GetSchedualedRun() []SchedualedRun {
	if m != nil {
		return m.SchedualedRun
	}
	return nil
}

func (m *QueryAllSchedualedRunResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStorageRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetStorageRequest) Reset()         { *m = QueryGetStorageRequest{} }
func (m *QueryGetStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStorageRequest) ProtoMessage()    {}
func (*QueryGetStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{4}
}
func (m *QueryGetStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStorageRequest.Merge(m, src)
}
func (m *QueryGetStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStorageRequest proto.InternalMessageInfo

func (m *QueryGetStorageRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetStorageResponse struct {
	Storage *Storage `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (m *QueryGetStorageResponse) Reset()         { *m = QueryGetStorageResponse{} }
func (m *QueryGetStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStorageResponse) ProtoMessage()    {}
func (*QueryGetStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{5}
}
func (m *QueryGetStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStorageResponse.Merge(m, src)
}
func (m *QueryGetStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStorageResponse proto.InternalMessageInfo

func (m *QueryGetStorageResponse) GetStorage() *Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

type QueryAllStorageRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStorageRequest) Reset()         { *m = QueryAllStorageRequest{} }
func (m *QueryAllStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStorageRequest) ProtoMessage()    {}
func (*QueryAllStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{6}
}
func (m *QueryAllStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStorageRequest.Merge(m, src)
}
func (m *QueryAllStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStorageRequest proto.InternalMessageInfo

func (m *QueryAllStorageRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStorageResponse struct {
	Storage    []*Storage          `protobuf:"bytes,1,rep,name=storage,proto3" json:"storage,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStorageResponse) Reset()         { *m = QueryAllStorageResponse{} }
func (m *QueryAllStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStorageResponse) ProtoMessage()    {}
func (*QueryAllStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{7}
}
func (m *QueryAllStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStorageResponse.Merge(m, src)
}
func (m *QueryAllStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStorageResponse proto.InternalMessageInfo

func (m *QueryAllStorageResponse) GetStorage() []*Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *QueryAllStorageResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetScriptRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetScriptRequest) Reset()         { *m = QueryGetScriptRequest{} }
func (m *QueryGetScriptRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetScriptRequest) ProtoMessage()    {}
func (*QueryGetScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{8}
}
func (m *QueryGetScriptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetScriptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetScriptRequest.Merge(m, src)
}
func (m *QueryGetScriptRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetScriptRequest proto.InternalMessageInfo

func (m *QueryGetScriptRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetScriptResponse struct {
	Script *Script `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
}

func (m *QueryGetScriptResponse) Reset()         { *m = QueryGetScriptResponse{} }
func (m *QueryGetScriptResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetScriptResponse) ProtoMessage()    {}
func (*QueryGetScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{9}
}
func (m *QueryGetScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetScriptResponse.Merge(m, src)
}
func (m *QueryGetScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetScriptResponse proto.InternalMessageInfo

func (m *QueryGetScriptResponse) GetScript() *Script {
	if m != nil {
		return m.Script
	}
	return nil
}

type QueryGetSchemaRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSchemaRequest) Reset()         { *m = QueryGetSchemaRequest{} }
func (m *QueryGetSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSchemaRequest) ProtoMessage()    {}
func (*QueryGetSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{10}
}
func (m *QueryGetSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSchemaRequest.Merge(m, src)
}
func (m *QueryGetSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSchemaRequest proto.InternalMessageInfo

func (m *QueryGetSchemaRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSchemaResponse struct {
	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *QueryGetSchemaResponse) Reset()         { *m = QueryGetSchemaResponse{} }
func (m *QueryGetSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSchemaResponse) ProtoMessage()    {}
func (*QueryGetSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{11}
}
func (m *QueryGetSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSchemaResponse.Merge(m, src)
}
func (m *QueryGetSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSchemaResponse proto.InternalMessageInfo

func (m *QueryGetSchemaResponse) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

type QueryWsgiRequest struct {
	Index       string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Httprequest string `protobuf:"bytes,2,opt,name=httprequest,proto3" json:"httprequest,omitempty"`
}

func (m *QueryWsgiRequest) Reset()         { *m = QueryWsgiRequest{} }
func (m *QueryWsgiRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWsgiRequest) ProtoMessage()    {}
func (*QueryWsgiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{12}
}
func (m *QueryWsgiRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWsgiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWsgiRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWsgiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWsgiRequest.Merge(m, src)
}
func (m *QueryWsgiRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWsgiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWsgiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWsgiRequest proto.InternalMessageInfo

func (m *QueryWsgiRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *QueryWsgiRequest) GetHttprequest() string {
	if m != nil {
		return m.Httprequest
	}
	return ""
}

type QueryWsgiResponse struct {
	Httpresponse string `protobuf:"bytes,1,opt,name=httpresponse,proto3" json:"httpresponse,omitempty"`
}

func (m *QueryWsgiResponse) Reset()         { *m = QueryWsgiResponse{} }
func (m *QueryWsgiResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWsgiResponse) ProtoMessage()    {}
func (*QueryWsgiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{13}
}
func (m *QueryWsgiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWsgiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWsgiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWsgiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWsgiResponse.Merge(m, src)
}
func (m *QueryWsgiResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWsgiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWsgiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWsgiResponse proto.InternalMessageInfo

func (m *QueryWsgiResponse) GetHttpresponse() string {
	if m != nil {
		return m.Httpresponse
	}
	return ""
}

type QueryAllScriptRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllScriptRequest) Reset()         { *m = QueryAllScriptRequest{} }
func (m *QueryAllScriptRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllScriptRequest) ProtoMessage()    {}
func (*QueryAllScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{14}
}
func (m *QueryAllScriptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllScriptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllScriptRequest.Merge(m, src)
}
func (m *QueryAllScriptRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllScriptRequest proto.InternalMessageInfo

func (m *QueryAllScriptRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllScriptResponse struct {
	Script     []*Script           `protobuf:"bytes,1,rep,name=Script,proto3" json:"Script,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllScriptResponse) Reset()         { *m = QueryAllScriptResponse{} }
func (m *QueryAllScriptResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllScriptResponse) ProtoMessage()    {}
func (*QueryAllScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{15}
}
func (m *QueryAllScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllScriptResponse.Merge(m, src)
}
func (m *QueryAllScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllScriptResponse proto.InternalMessageInfo

func (m *QueryAllScriptResponse) GetScript() []*Script {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *QueryAllScriptResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPrefixStorageRequest struct {
	Prefix     string             `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPrefixStorageRequest) Reset()         { *m = QueryPrefixStorageRequest{} }
func (m *QueryPrefixStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPrefixStorageRequest) ProtoMessage()    {}
func (*QueryPrefixStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{16}
}
func (m *QueryPrefixStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPrefixStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPrefixStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPrefixStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPrefixStorageRequest.Merge(m, src)
}
func (m *QueryPrefixStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPrefixStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPrefixStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPrefixStorageRequest proto.InternalMessageInfo

func (m *QueryPrefixStorageRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *QueryPrefixStorageRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPrefixStorageResponse struct {
	Storage    []*Storage          `protobuf:"bytes,1,rep,name=storage,proto3" json:"storage,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPrefixStorageResponse) Reset()         { *m = QueryPrefixStorageResponse{} }
func (m *QueryPrefixStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPrefixStorageResponse) ProtoMessage()    {}
func (*QueryPrefixStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9daeaced38d40e23, []int{17}
}
func (m *QueryPrefixStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPrefixStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPrefixStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPrefixStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPrefixStorageResponse.Merge(m, src)
}
func (m *QueryPrefixStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPrefixStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPrefixStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPrefixStorageResponse proto.InternalMessageInfo

func (m *QueryPrefixStorageResponse) GetStorage() []*Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *QueryPrefixStorageResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetSchedualedRunRequest)(nil), "dyson.QueryGetSchedualedRunRequest")
	proto.RegisterType((*QueryGetSchedualedRunResponse)(nil), "dyson.QueryGetSchedualedRunResponse")
	proto.RegisterType((*QueryAllSchedualedRunRequest)(nil), "dyson.QueryAllSchedualedRunRequest")
	proto.RegisterType((*QueryAllSchedualedRunResponse)(nil), "dyson.QueryAllSchedualedRunResponse")
	proto.RegisterType((*QueryGetStorageRequest)(nil), "dyson.QueryGetStorageRequest")
	proto.RegisterType((*QueryGetStorageResponse)(nil), "dyson.QueryGetStorageResponse")
	proto.RegisterType((*QueryAllStorageRequest)(nil), "dyson.QueryAllStorageRequest")
	proto.RegisterType((*QueryAllStorageResponse)(nil), "dyson.QueryAllStorageResponse")
	proto.RegisterType((*QueryGetScriptRequest)(nil), "dyson.QueryGetScriptRequest")
	proto.RegisterType((*QueryGetScriptResponse)(nil), "dyson.QueryGetScriptResponse")
	proto.RegisterType((*QueryGetSchemaRequest)(nil), "dyson.QueryGetSchemaRequest")
	proto.RegisterType((*QueryGetSchemaResponse)(nil), "dyson.QueryGetSchemaResponse")
	proto.RegisterType((*QueryWsgiRequest)(nil), "dyson.QueryWsgiRequest")
	proto.RegisterType((*QueryWsgiResponse)(nil), "dyson.QueryWsgiResponse")
	proto.RegisterType((*QueryAllScriptRequest)(nil), "dyson.QueryAllScriptRequest")
	proto.RegisterType((*QueryAllScriptResponse)(nil), "dyson.QueryAllScriptResponse")
	proto.RegisterType((*QueryPrefixStorageRequest)(nil), "dyson.QueryPrefixStorageRequest")
	proto.RegisterType((*QueryPrefixStorageResponse)(nil), "dyson.QueryPrefixStorageResponse")
}

func init() { proto.RegisterFile("dyson/query.proto", fileDescriptor_9daeaced38d40e23) }

var fileDescriptor_9daeaced38d40e23 = []byte{
	// 883 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x5f, 0x6b, 0x13, 0x4b,
	0x14, 0xcf, 0xf6, 0xef, 0xed, 0xb4, 0xc9, 0x6d, 0xa7, 0x49, 0xda, 0xbb, 0x37, 0xd9, 0x9b, 0xbb,
	0xf7, 0xde, 0xde, 0x22, 0xb8, 0x6b, 0xab, 0xe0, 0x8b, 0x20, 0xad, 0x60, 0x51, 0x10, 0xea, 0x16,
	0x14, 0x7c, 0xa9, 0x9b, 0x64, 0xba, 0x59, 0x48, 0x76, 0xb7, 0xfb, 0x47, 0x53, 0x8a, 0x2f, 0x82,
	0x20, 0x22, 0x28, 0xf8, 0x31, 0x7c, 0xf0, 0x6b, 0xf4, 0xb1, 0xe0, 0x8b, 0x4f, 0x22, 0xad, 0x1f,
	0x44, 0x76, 0xe6, 0x64, 0x3b, 0x93, 0xdd, 0xac, 0x28, 0x01, 0x9f, 0x92, 0x39, 0x73, 0xce, 0xef,
	0xf7, 0x3b, 0x67, 0xce, 0x9c, 0x59, 0xb4, 0xd4, 0x3e, 0x0a, 0x5c, 0x47, 0x3f, 0x8c, 0x88, 0x7f,
	0xa4, 0x79, 0xbe, 0x1b, 0xba, 0x78, 0x9a, 0x9a, 0xe4, 0x9a, 0xe5, 0xba, 0x56, 0x97, 0xe8, 0xa6,
	0x67, 0xeb, 0xa6, 0xe3, 0xb8, 0xa1, 0x19, 0xda, 0xae, 0x13, 0x30, 0x27, 0xf9, 0x52, 0xcb, 0x0d,
	0x7a, 0x6e, 0xa0, 0x37, 0xcd, 0x80, 0xb0, 0x68, 0xfd, 0xc9, 0x46, 0x93, 0x84, 0xe6, 0x86, 0xee,
	0x99, 0x96, 0xed, 0x50, 0x67, 0xf0, 0xc5, 0x8c, 0x23, 0x68, 0xf9, 0xb6, 0x17, 0x82, 0xad, 0xc4,
	0x6c, 0x61, 0x1f, 0xd6, 0xcb, 0xe0, 0x13, 0xba, 0xbe, 0x69, 0x11, 0x30, 0xca, 0x83, 0xc0, 0x0e,
	0x69, 0x47, 0x66, 0x97, 0xb4, 0xf7, 0xfd, 0x68, 0x08, 0xb4, 0x17, 0x58, 0x17, 0xb6, 0xb2, 0xe5,
	0x5a, 0x2e, 0xfd, 0xab, 0xc7, 0xff, 0x98, 0x55, 0xbd, 0x86, 0x6a, 0xf7, 0x63, 0x81, 0x3b, 0x24,
	0xdc, 0x4b, 0x90, 0x8c, 0xc8, 0x31, 0xc8, 0x61, 0x44, 0x82, 0x10, 0x97, 0xd1, 0xb4, 0xed, 0xb4,
	0x49, 0x7f, 0x55, 0x6a, 0x48, 0xeb, 0x73, 0x06, 0x5b, 0xa8, 0x4d, 0x54, 0x1f, 0x11, 0x15, 0x78,
	0xae, 0x13, 0x10, 0xbc, 0x85, 0x4a, 0xa2, 0x30, 0x1a, 0x3f, 0xbf, 0x59, 0xd6, 0xa8, 0x32, 0x4d,
	0x88, 0xda, 0x9e, 0x3a, 0xf9, 0xfc, 0x57, 0xc1, 0x28, 0x06, 0xbc, 0x51, 0x3d, 0x00, 0x65, 0x5b,
	0xdd, 0x6e, 0xa6, 0xb2, 0xdb, 0x08, 0x5d, 0x14, 0x13, 0xe0, 0xd7, 0x34, 0x56, 0x79, 0x2d, 0xae,
	0xbc, 0xc6, 0xce, 0x0d, 0x2a, 0xaf, 0xed, 0x9a, 0x16, 0x81, 0x58, 0x83, 0x8b, 0x54, 0xdf, 0x4b,
	0x90, 0x4c, 0x9a, 0x28, 0x27, 0x99, 0xc9, 0x1f, 0x4a, 0x06, 0xef, 0x08, 0x62, 0x27, 0xa8, 0xd8,
	0xff, 0xbf, 0x2b, 0x96, 0xf1, 0x0b, 0x6a, 0x35, 0x54, 0x4d, 0x2a, 0xcf, 0xda, 0x21, 0xff, 0xa4,
	0x6e, 0xa1, 0x95, 0x94, 0x3f, 0xa4, 0xb5, 0x8e, 0x66, 0xa1, 0xa3, 0xa0, 0x7a, 0xa5, 0x41, 0x3e,
	0xe0, 0x38, 0xd8, 0x56, 0x1f, 0x03, 0x69, 0x5c, 0x21, 0x91, 0x74, 0x5c, 0x87, 0xf0, 0x5a, 0x02,
	0x9d, 0x3c, 0x45, 0x96, 0xce, 0xc9, 0x1c, 0x9d, 0xe3, 0xab, 0xf2, 0x65, 0x54, 0xb9, 0xe8, 0xef,
	0xf8, 0x62, 0xe6, 0x17, 0xf9, 0x26, 0x77, 0x28, 0xe0, 0x0e, 0xda, 0xff, 0x43, 0x33, 0xec, 0x66,
	0x43, 0x6d, 0x8a, 0x49, 0xcb, 0x50, 0x37, 0xd8, 0x14, 0xf9, 0x3a, 0xa4, 0x67, 0xe6, 0xf3, 0x5d,
	0xe1, 0xf9, 0x98, 0x3b, 0xf0, 0x55, 0x63, 0xbe, 0xd8, 0x02, 0x01, 0xb0, 0x52, 0xef, 0xa2, 0x45,
	0x1a, 0xf1, 0x30, 0xb0, 0xec, 0x5c, 0x6c, 0xdc, 0x40, 0xf3, 0x9d, 0x30, 0xf4, 0x7c, 0xe6, 0x44,
	0x8b, 0x38, 0x67, 0xf0, 0x26, 0xf5, 0x3a, 0x5a, 0xe2, 0xb0, 0x80, 0x58, 0x45, 0x0b, 0xcc, 0x87,
	0xad, 0x01, 0x53, 0xb0, 0xa9, 0xfb, 0x90, 0x25, 0xbd, 0x68, 0x7c, 0x55, 0xc7, 0xd5, 0x45, 0x2f,
	0x25, 0xae, 0x51, 0x53, 0x07, 0xb1, 0x37, 0x38, 0x88, 0xc9, 0x8c, 0x83, 0x60, 0xbf, 0xe3, 0xeb,
	0xa0, 0x63, 0xf4, 0x07, 0x55, 0xb2, 0xeb, 0x93, 0x03, 0xbb, 0x3f, 0x74, 0x6b, 0xaa, 0x68, 0xc6,
	0xa3, 0xf6, 0xc1, 0x29, 0xb1, 0xd5, 0x50, 0x1d, 0x26, 0x7e, 0xba, 0x0e, 0x6f, 0x24, 0x24, 0x67,
	0xb1, 0xff, 0xb2, 0x0b, 0xb5, 0xf9, 0xe1, 0x37, 0x34, 0x4d, 0x15, 0xe1, 0x57, 0x12, 0x2a, 0x0a,
	0x03, 0x13, 0xff, 0x03, 0xec, 0x79, 0xef, 0x90, 0xfc, 0x6f, 0xbe, 0x13, 0x74, 0x98, 0xf6, 0xfc,
	0xe3, 0xd7, 0x77, 0x13, 0xeb, 0x78, 0x4d, 0x77, 0x7d, 0x4b, 0x67, 0x8f, 0xe0, 0xf0, 0x33, 0x69,
	0x44, 0x8e, 0x7e, 0x4c, 0x7b, 0xfd, 0x19, 0x7e, 0x21, 0xa1, 0x45, 0x01, 0x69, 0xab, 0xdb, 0x15,
	0xf5, 0x8c, 0x78, 0x7d, 0x44, 0x3d, 0xa3, 0x5e, 0x0e, 0x75, 0x8d, 0xea, 0x69, 0x60, 0x25, 0x5f,
	0x0f, 0xee, 0xa0, 0x59, 0xa8, 0x3d, 0xae, 0x0f, 0x27, 0x2a, 0xb4, 0x8e, 0xac, 0x8c, 0xda, 0x06,
	0x46, 0x85, 0x32, 0xae, 0xe2, 0xaa, 0x2e, 0x7c, 0x33, 0x24, 0x19, 0xb7, 0x10, 0x82, 0x90, 0x38,
	0xd5, 0xfa, 0x70, 0x16, 0x39, 0x64, 0xe9, 0xc9, 0xac, 0x56, 0x29, 0xd9, 0x22, 0x2e, 0x89, 0x64,
	0xb8, 0x3d, 0xb8, 0x6c, 0xb8, 0x96, 0x3a, 0x36, 0xee, 0xde, 0xcb, 0xf5, 0x11, 0xbb, 0x00, 0x5f,
	0xa7, 0xf0, 0x2b, 0xb8, 0xa2, 0xf3, 0xdf, 0x48, 0x49, 0x2a, 0x94, 0x25, 0x9e, 0x6e, 0x19, 0x2c,
	0xdc, 0x0c, 0xcd, 0x60, 0xe1, 0x47, 0x66, 0x06, 0x4b, 0xbc, 0x9d, 0xb0, 0x3c, 0x40, 0x53, 0xf1,
	0xa0, 0xc3, 0x2b, 0x3c, 0x0a, 0x37, 0x46, 0xe5, 0xd5, 0xf4, 0x06, 0x20, 0xff, 0x49, 0x91, 0x2b,
	0x78, 0x19, 0x90, 0x9f, 0x06, 0x96, 0x9d, 0xe0, 0xde, 0x41, 0xf3, 0x34, 0x02, 0x0a, 0x35, 0x98,
	0x47, 0xf7, 0x02, 0xcb, 0x88, 0x1c, 0xb9, 0x22, 0x2c, 0x13, 0xc4, 0x32, 0x45, 0x2c, 0xe1, 0x05,
	0x9d, 0xfb, 0x32, 0xc5, 0xfb, 0x68, 0x8e, 0xa1, 0xc4, 0x47, 0x5a, 0x4b, 0x35, 0xe6, 0xc8, 0x8a,
	0xa7, 0xa6, 0xa4, 0x5a, 0xa1, 0xf8, 0xbf, 0xe3, 0xa2, 0x50, 0x71, 0xec, 0xa3, 0xa2, 0x30, 0x49,
	0x70, 0x83, 0x87, 0xc9, 0x1a, 0x71, 0xf2, 0xdf, 0x39, 0x1e, 0x40, 0x56, 0xa3, 0x64, 0x55, 0x5c,
	0x16, 0xbb, 0x87, 0xcd, 0xc2, 0xed, 0x1b, 0x27, 0x67, 0x8a, 0x74, 0x7a, 0xa6, 0x48, 0x5f, 0xce,
	0x14, 0xe9, 0xed, 0xb9, 0x52, 0x38, 0x3d, 0x57, 0x0a, 0x9f, 0xce, 0x95, 0xc2, 0x23, 0xd5, 0xb2,
	0xc3, 0x4e, 0xd4, 0xd4, 0x5a, 0x6e, 0x8f, 0xbb, 0x56, 0x7d, 0xf8, 0x0d, 0x8f, 0x3c, 0x12, 0x34,
	0x67, 0xe8, 0xd7, 0xed, 0xd5, 0x6f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x85, 0xb4, 0x25, 0xc2,
	0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a schedualedRun by index.
	SchedualedRun(ctx context.Context, in *QueryGetSchedualedRunRequest, opts ...grpc.CallOption) (*QueryGetSchedualedRunResponse, error)
	// Queries a list of schedualedRun items.
	SchedualedRunAll(ctx context.Context, in *QueryAllSchedualedRunRequest, opts ...grpc.CallOption) (*QueryAllSchedualedRunResponse, error)
	// Queries a storage by index.
	Storage(ctx context.Context, in *QueryGetStorageRequest, opts ...grpc.CallOption) (*QueryGetStorageResponse, error)
	// Queries a list of storage items.
	StorageAll(ctx context.Context, in *QueryAllStorageRequest, opts ...grpc.CallOption) (*QueryAllStorageResponse, error)
	// Queries a script by index.
	Script(ctx context.Context, in *QueryGetScriptRequest, opts ...grpc.CallOption) (*QueryGetScriptResponse, error)
	// Queries a script schema by index.
	Schema(ctx context.Context, in *QueryGetSchemaRequest, opts ...grpc.CallOption) (*QueryGetSchemaResponse, error)
	// Queries a script wsgi app by index.
	Wsgi(ctx context.Context, in *QueryWsgiRequest, opts ...grpc.CallOption) (*QueryWsgiResponse, error)
	// Queries a script by index.
	QueryScript(ctx context.Context, in *MsgRun, opts ...grpc.CallOption) (*MsgRunResponse, error)
	// Queries a list of script items.
	ScriptAll(ctx context.Context, in *QueryAllScriptRequest, opts ...grpc.CallOption) (*QueryAllScriptResponse, error)
	PrefixStorage(ctx context.Context, in *QueryPrefixStorageRequest, opts ...grpc.CallOption) (*QueryPrefixStorageResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) SchedualedRun(ctx context.Context, in *QueryGetSchedualedRunRequest, opts ...grpc.CallOption) (*QueryGetSchedualedRunResponse, error) {
	out := new(QueryGetSchedualedRunResponse)
	err := c.cc.Invoke(ctx, "/dyson.Query/SchedualedRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SchedualedRunAll(ctx context.Context, in *QueryAllSchedualedRunRequest, opts ...grpc.CallOption) (*QueryAllSchedualedRunResponse, error) {
	out := new(QueryAllSchedualedRunResponse)
	err := c.cc.Invoke(ctx, "/dyson.Query/SchedualedRunAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Storage(ctx context.Context, in *QueryGetStorageRequest, opts ...grpc.CallOption) (*QueryGetStorageResponse, error) {
	out := new(QueryGetStorageResponse)
	err := c.cc.Invoke(ctx, "/dyson.Query/Storage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StorageAll(ctx context.Context, in *QueryAllStorageRequest, opts ...grpc.CallOption) (*QueryAllStorageResponse, error) {
	out := new(QueryAllStorageResponse)
	err := c.cc.Invoke(ctx, "/dyson.Query/StorageAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Script(ctx context.Context, in *QueryGetScriptRequest, opts ...grpc.CallOption) (*QueryGetScriptResponse, error) {
	out := new(QueryGetScriptResponse)
	err := c.cc.Invoke(ctx, "/dyson.Query/Script", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Schema(ctx context.Context, in *QueryGetSchemaRequest, opts ...grpc.CallOption) (*QueryGetSchemaResponse, error) {
	out := new(QueryGetSchemaResponse)
	err := c.cc.Invoke(ctx, "/dyson.Query/Schema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Wsgi(ctx context.Context, in *QueryWsgiRequest, opts ...grpc.CallOption) (*QueryWsgiResponse, error) {
	out := new(QueryWsgiResponse)
	err := c.cc.Invoke(ctx, "/dyson.Query/Wsgi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryScript(ctx context.Context, in *MsgRun, opts ...grpc.CallOption) (*MsgRunResponse, error) {
	out := new(MsgRunResponse)
	err := c.cc.Invoke(ctx, "/dyson.Query/QueryScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScriptAll(ctx context.Context, in *QueryAllScriptRequest, opts ...grpc.CallOption) (*QueryAllScriptResponse, error) {
	out := new(QueryAllScriptResponse)
	err := c.cc.Invoke(ctx, "/dyson.Query/ScriptAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PrefixStorage(ctx context.Context, in *QueryPrefixStorageRequest, opts ...grpc.CallOption) (*QueryPrefixStorageResponse, error) {
	out := new(QueryPrefixStorageResponse)
	err := c.cc.Invoke(ctx, "/dyson.Query/PrefixStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a schedualedRun by index.
	SchedualedRun(context.Context, *QueryGetSchedualedRunRequest) (*QueryGetSchedualedRunResponse, error)
	// Queries a list of schedualedRun items.
	SchedualedRunAll(context.Context, *QueryAllSchedualedRunRequest) (*QueryAllSchedualedRunResponse, error)
	// Queries a storage by index.
	Storage(context.Context, *QueryGetStorageRequest) (*QueryGetStorageResponse, error)
	// Queries a list of storage items.
	StorageAll(context.Context, *QueryAllStorageRequest) (*QueryAllStorageResponse, error)
	// Queries a script by index.
	Script(context.Context, *QueryGetScriptRequest) (*QueryGetScriptResponse, error)
	// Queries a script schema by index.
	Schema(context.Context, *QueryGetSchemaRequest) (*QueryGetSchemaResponse, error)
	// Queries a script wsgi app by index.
	Wsgi(context.Context, *QueryWsgiRequest) (*QueryWsgiResponse, error)
	// Queries a script by index.
	QueryScript(context.Context, *MsgRun) (*MsgRunResponse, error)
	// Queries a list of script items.
	ScriptAll(context.Context, *QueryAllScriptRequest) (*QueryAllScriptResponse, error)
	PrefixStorage(context.Context, *QueryPrefixStorageRequest) (*QueryPrefixStorageResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) SchedualedRun(ctx context.Context, req *QueryGetSchedualedRunRequest) (*QueryGetSchedualedRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedualedRun not implemented")
}
func (*UnimplementedQueryServer) SchedualedRunAll(ctx context.Context, req *QueryAllSchedualedRunRequest) (*QueryAllSchedualedRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedualedRunAll not implemented")
}
func (*UnimplementedQueryServer) Storage(ctx context.Context, req *QueryGetStorageRequest) (*QueryGetStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Storage not implemented")
}
func (*UnimplementedQueryServer) StorageAll(ctx context.Context, req *QueryAllStorageRequest) (*QueryAllStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageAll not implemented")
}
func (*UnimplementedQueryServer) Script(ctx context.Context, req *QueryGetScriptRequest) (*QueryGetScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Script not implemented")
}
func (*UnimplementedQueryServer) Schema(ctx context.Context, req *QueryGetSchemaRequest) (*QueryGetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schema not implemented")
}
func (*UnimplementedQueryServer) Wsgi(ctx context.Context, req *QueryWsgiRequest) (*QueryWsgiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wsgi not implemented")
}
func (*UnimplementedQueryServer) QueryScript(ctx context.Context, req *MsgRun) (*MsgRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryScript not implemented")
}
func (*UnimplementedQueryServer) ScriptAll(ctx context.Context, req *QueryAllScriptRequest) (*QueryAllScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptAll not implemented")
}
func (*UnimplementedQueryServer) PrefixStorage(ctx context.Context, req *QueryPrefixStorageRequest) (*QueryPrefixStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrefixStorage not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_SchedualedRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSchedualedRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SchedualedRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dyson.Query/SchedualedRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SchedualedRun(ctx, req.(*QueryGetSchedualedRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SchedualedRunAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSchedualedRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SchedualedRunAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dyson.Query/SchedualedRunAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SchedualedRunAll(ctx, req.(*QueryAllSchedualedRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Storage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Storage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dyson.Query/Storage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Storage(ctx, req.(*QueryGetStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StorageAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StorageAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dyson.Query/StorageAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StorageAll(ctx, req.(*QueryAllStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Script_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Script(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dyson.Query/Script",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Script(ctx, req.(*QueryGetScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Schema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Schema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dyson.Query/Schema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Schema(ctx, req.(*QueryGetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Wsgi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWsgiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Wsgi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dyson.Query/Wsgi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Wsgi(ctx, req.(*QueryWsgiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dyson.Query/QueryScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryScript(ctx, req.(*MsgRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScriptAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScriptAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dyson.Query/ScriptAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScriptAll(ctx, req.(*QueryAllScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PrefixStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPrefixStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PrefixStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dyson.Query/PrefixStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PrefixStorage(ctx, req.(*QueryPrefixStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dyson.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SchedualedRun",
			Handler:    _Query_SchedualedRun_Handler,
		},
		{
			MethodName: "SchedualedRunAll",
			Handler:    _Query_SchedualedRunAll_Handler,
		},
		{
			MethodName: "Storage",
			Handler:    _Query_Storage_Handler,
		},
		{
			MethodName: "StorageAll",
			Handler:    _Query_StorageAll_Handler,
		},
		{
			MethodName: "Script",
			Handler:    _Query_Script_Handler,
		},
		{
			MethodName: "Schema",
			Handler:    _Query_Schema_Handler,
		},
		{
			MethodName: "Wsgi",
			Handler:    _Query_Wsgi_Handler,
		},
		{
			MethodName: "QueryScript",
			Handler:    _Query_QueryScript_Handler,
		},
		{
			MethodName: "ScriptAll",
			Handler:    _Query_ScriptAll_Handler,
		},
		{
			MethodName: "PrefixStorage",
			Handler:    _Query_PrefixStorage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dyson/query.proto",
}

func (m *QueryGetSchedualedRunRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSchedualedRunRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSchedualedRunRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSchedualedRunResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSchedualedRunResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSchedualedRunResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SchedualedRun.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSchedualedRunRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSchedualedRunRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSchedualedRunRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSchedualedRunResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSchedualedRunResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSchedualedRunResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchedualedRun) > 0 {
		for iNdEx := len(m.SchedualedRun) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SchedualedRun[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Storage != nil {
		{
			size, err := m.Storage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Storage) > 0 {
		for iNdEx := len(m.Storage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Storage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetScriptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetScriptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetScriptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Script != nil {
		{
			size, err := m.Script.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWsgiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWsgiRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWsgiRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Httprequest) > 0 {
		i -= len(m.Httprequest)
		copy(dAtA[i:], m.Httprequest)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Httprequest)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWsgiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWsgiResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWsgiResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Httpresponse) > 0 {
		i -= len(m.Httpresponse)
		copy(dAtA[i:], m.Httpresponse)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Httpresponse)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllScriptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllScriptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllScriptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Script) > 0 {
		for iNdEx := len(m.Script) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Script[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPrefixStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPrefixStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPrefixStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPrefixStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPrefixStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPrefixStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Storage) > 0 {
		for iNdEx := len(m.Storage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Storage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetSchedualedRunRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSchedualedRunResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SchedualedRun.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSchedualedRunRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSchedualedRunResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SchedualedRun) > 0 {
		for _, e := range m.SchedualedRun {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Storage != nil {
		l = m.Storage.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Storage) > 0 {
		for _, e := range m.Storage {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetScriptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Script != nil {
		l = m.Script.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWsgiRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Httprequest)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWsgiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Httpresponse)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllScriptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Script) > 0 {
		for _, e := range m.Script {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPrefixStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPrefixStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Storage) > 0 {
		for _, e := range m.Storage {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetSchedualedRunRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSchedualedRunRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSchedualedRunRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSchedualedRunResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSchedualedRunResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSchedualedRunResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedualedRun", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SchedualedRun.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSchedualedRunRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSchedualedRunRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSchedualedRunRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSchedualedRunResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSchedualedRunResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSchedualedRunResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedualedRun", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchedualedRun = append(m.SchedualedRun, SchedualedRun{})
			if err := m.SchedualedRun[len(m.SchedualedRun)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Storage == nil {
				m.Storage = &Storage{}
			}
			if err := m.Storage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Storage = append(m.Storage, &Storage{})
			if err := m.Storage[len(m.Storage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetScriptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetScriptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetScriptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Script == nil {
				m.Script = &Script{}
			}
			if err := m.Script.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWsgiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWsgiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWsgiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Httprequest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Httprequest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWsgiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWsgiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWsgiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Httpresponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Httpresponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllScriptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllScriptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllScriptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Script = append(m.Script, &Script{})
			if err := m.Script[len(m.Script)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPrefixStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPrefixStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPrefixStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPrefixStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPrefixStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPrefixStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Storage = append(m.Storage, &Storage{})
			if err := m.Storage[len(m.Storage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
